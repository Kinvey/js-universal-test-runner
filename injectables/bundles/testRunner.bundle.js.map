{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f543bbe1f6e966846db0","webpack:///./injectables/platform.js","webpack:///./injectables/test-runner","webpack:///./injectables/test-runner/testRunner.js","webpack:///(webpack)/buildin/global.js","webpack:///external \"react-native\"","webpack:///(webpack)/buildin/amd-options.js","webpack:///./injectables/test-runner/mobileTapReporter.js","webpack:///external \"./libs/chai\"","webpack:///external \"./libs/mocha\""],"names":[],"mappings":"AAAA;AACA;AACA,0EAA0E,MAAM,gCAAgC,EAAE,YAAY,EAAE;AAChI;AACA;AACA;AACA,iFAAiF,MAAM,gCAAgC,EAAE,YAAY,EAAE;AACvI;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,EAAE;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpEA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA,2B;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,gFAAgF;AAChF;AACA;;AAEA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;;;;;;;;AC/PA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;ACpBA,0DAA0D,yDAAyD,6BAA6B;AAChJ,+C;;;;;;ACDA;AACA;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+DAA+D,YAAY;AAC3E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;ACpHA,+C;;;;;;ACAA,+C","file":"testRunner.bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory((function webpackLoadOptionalExternalModule() { try { return require(\"react-native\"); } catch(e) {} }()), require(\"./libs/chai\"), require(\"./libs/mocha\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react-native\", \"./libs/chai\", \"./libs/mocha\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"testRunner\"] = factory((function webpackLoadOptionalExternalModule() { try { return require(\"react-native\"); } catch(e) {} }()), require(\"./libs/chai\"), require(\"./libs/mocha\"));\n\telse\n\t\troot[\"testRunner\"] = factory(root[\"react-native\"], root[\"./libs/chai\"], root[\"./libs/mocha\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f543bbe1f6e966846db0","var platform;\nvar isCordova = false;\nvar isWindowsPhone = false;\nvar isAndroid = false;\nvar isIOS = false;\nvar isReactNative;\ntry {\n    var ReactNative = require('react-native');\n    isAndroid = ReactNative.Platform.OS === 'android';\n    isIOS = ReactNative.Platform.OS === 'ios';\n    isReactNative = true;\n} catch (e) {\n    isReactNative = false;\n}\n\nvar isNativeScript =\n    Boolean(\n        (typeof android !== 'undefined' &&\n            android &&\n            android.widget &&\n            android.widget.Button) ||\n            (typeof UIButton !== 'undefined' && UIButton)\n    ) && !isReactNative;\n\nif (typeof window !== 'undefined' && !isNativeScript && !isReactNative) {\n    isCordova =\n        /^file:\\/{3}[^\\/]|x-wmapp/i.test(window.location.href) &&\n        /ios|iphone|ipod|ipad|android|iemobile/i.test(navigator.userAgent);\n    isWindowsPhone = isCordova && /iemobile/i.test(navigator.userAgent);\n    isAndroid = isCordova && cordova.platformId === 'android';\n}\n\nvar isNodejs = typeof exports === 'object' && typeof window === 'undefined';\nvar isRequirejs = typeof define === 'function' && define.amd;\nvar isDesktop = !isNativeScript && !isCordova && !isNodejs && !isReactNative;\n\nif (isNativeScript) {\n    platform = 'ns';\n} else if (isNodejs) {\n    platform = 'nodejs';\n} else if (isDesktop) {\n    platform = 'desktop';\n} else if (isCordova) {\n    platform = 'cordova';\n} else if (isReactNative) {\n    platform = 'reactnative';\n}\n\nvar isInAppBuilderSimulator = function() {\n    return (\n        typeof window !== 'undefined' &&\n        window.navigator &&\n        window.navigator.simulator\n    );\n};\n\nmodule.exports = {\n    isCordova,\n    isNativeScript,\n    isDesktop,\n    isWindowsPhone,\n    isAndroid,\n    isIOS,\n    isNodejs,\n    isRequirejs,\n    isReactNative,\n    platform,\n    isInAppBuilderSimulator\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./injectables/platform.js\n// module id = 0\n// module chunks = 0","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./injectables/test-runner\n// module id = 1\n// module chunks = 0","const {\n    isReactNative,\n    isNodejs,\n    isNativeScript,\n    isCordova,\n    isDesktop\n} = require('../platform');\n\nconst MobileTapReporter = require('./mobileTapReporter');\n\nfunction TestRunner() {\n    this.runQueue = [];\n    this.initialize();\n}\n\nTestRunner.prototype.isCordovaApp = function() {\n    return isCordova;\n};\n\nTestRunner.prototype.isDevice = function() {\n    return isCordova || isNativeScript || isReactNative;\n};\n\nTestRunner.prototype.isNativeScriptApp = function() {\n    return isNativeScript;\n};\n\nTestRunner.prototype.isNodejsApp = function() {\n    return isNodejs;\n};\n\nTestRunner.prototype.isDesktopApp = function() {\n    return isDesktop;\n};\n\nTestRunner.prototype.isCordovaApp = function() {\n    return isCordova;\n};\n\nTestRunner.prototype.initializeGlobals = function(root) {\n    root.runner = this;\n    root.chai = require('./libs/chai');\n    root.mocha = require('./libs/mocha');\n    root.ok = chai.assert.ok;\n    root.assert = chai.assert;\n    root.equal = chai.assert.strictEqual;\n    root.deepEqual = chai.assert.deepEqual;\n    root.expect = chai.expect;\n\n    root.mocha.setup('bdd');\n};\n\nTestRunner.prototype.initialize = function initialize(tests, config) {\n    this.config = config;\n\n    this.defaultScripts = [];\n\n    if (this.isDevice() && tests) {\n        this.initializeGlobals(global);\n        //due to react-native we can't have dynamic requires\n        // require('./suites/externalconfig.js');\n        // require('./suites/common.js');\n        // require('./suites/offline-common.js');\n\n        var el;\n        if (isNativeScript || isReactNative) {\n            // el = require(`./everlive.js`);\n        } else {\n            // var nodeBundle =\n            //     '../bundles/node-nativescript/everlive.node-nativescript.js'; //working around the static react analysis\n            // el = require(nodeBundle);\n        }\n\n        // global.Everlive = el;\n\n        tests();\n    } else if (!this.isDevice()) {\n        this.initializeGlobals(window);\n\n        this.defaultScripts = this.defaultScripts.concat(\n            [\n                // '../bundles/web-cordova/everlive.web-cordova.js'\n            ]\n        );\n\n        this.defaultScripts.unshift('libs/chai.js');\n        this.defaultScripts.unshift('libs/mocha.js');\n        this.defaultScripts.unshift('libs/underscore.js');\n\n        if (isCordova) {\n            this.defaultScripts.unshift('../cordova.js');\n            // this.defaultScripts[this.defaultScripts.length - 1] =\n            //     'everlive.js';\n        }\n\n        this.defaultLinks = ['libs/mocha.css'];\n\n        var scripts = null;\n        var css = null;\n        var self = this;\n\n        [].forEach.call(document.querySelectorAll('script'), function(script) {\n            if (script.src.indexOf('TestRunner') !== -1) {\n                var src = script.src;\n                self.path = src.substr(0, src.lastIndexOf('/') + 1);\n                scripts = script.dataset.js && script.dataset.js.split(',');\n                css = script.dataset.css && script.dataset.css.split(',');\n            }\n        });\n\n        if (document && !document.getElementById('mocha')) {\n            var mochaDiv = document.createElement('div');\n            mochaDiv.id = 'mocha';\n            document.body.appendChild(mochaDiv);\n        }\n\n        this.loadAndDefaults(scripts, css);\n    }\n};\n\nTestRunner.prototype.loadDefaults = function() {\n    this.load(this.defaultScripts, this.defaultLinks);\n};\n\nTestRunner.prototype.loadAndDefaults = function(scripts, links) {\n    this.loadDefaults();\n    this.load(scripts, links, true);\n};\n\nTestRunner.prototype.load = function(scripts, links, relative) {\n    var self = this;\n\n    if (scripts) {\n        scripts = Array.isArray(scripts) ? scripts : [scripts];\n\n        scripts.forEach(function(script) {\n            self.loadScript(script.trim(), relative);\n        });\n    }\n\n    if (links) {\n        links = Array.isArray(links) ? links : [links];\n\n        links.forEach(function(link) {\n            self.loadCss(link.trim());\n        });\n    }\n};\n\nTestRunner.prototype.loadScript = function insertScriptTag(src, relative) {\n    if (isNativeScript) {\n        var scriptName = src.substring(src.lastIndexOf('/'));\n        window[scriptName] = require(src);\n    } else {\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        var prefix = relative ? '' : this.path;\n        script.src = prefix + src;\n        script.async = false;\n\n        document.head.appendChild(script);\n    }\n};\n\nTestRunner.prototype.loadCss = function insertLinkTag(href) {\n    if (isNativeScript) {\n        return;\n    }\n\n    var link = document.createElement('link');\n\n    link.type = 'text/css';\n    link.rel = 'stylesheet';\n    link.href = this.path + href;\n\n    document.head.appendChild(link);\n};\n\nTestRunner.prototype.run = function run(tests, testFunc, context) {\n    if (typeof tests === 'function') {\n        //run a test without specific test arguments\n        var testFunction = tests;\n        var testContext = testFunc;\n        testFunc = testFunction;\n        context = testContext;\n        tests = [[]];\n    }\n\n    if (!this.loaded) {\n        this.runQueue = this.runQueue || [];\n        return this.runQueue.push([tests, testFunc, context]);\n    }\n\n    if (arguments.length) {\n        tests.forEach(function(test) {\n            testFunc.apply(context, test);\n        });\n    }\n};\n\nTestRunner.prototype.runAllTests = function() {\n    if (this.loaded) {\n        return;\n    }\n\n    var that = this;\n    this.loaded = true;\n    if (this.runQueue) {\n        this.configMocha({\n            timeout: 60000,\n            bail: false,\n            reporter: MobileTapReporter(this.config.logServerPort)\n        });\n\n        this.runQueue.forEach(function(queueItem) {\n            that.run.apply(that, queueItem);\n        });\n    }\n\n    this.runMocha();\n};\n\nTestRunner.prototype.configMocha = function(config) {\n    Object.keys(config).forEach(function(key) {\n        var val = config[key];\n        mocha[key].call(mocha, val);\n    });\n};\n\nTestRunner.prototype.runMocha = function() {\n    if (this.testsRan) {\n        //prevent multiple runs of tests\n        return;\n    }\n\n    this.testsRan = true;\n    mocha.run();\n};\n\nvar runner = new TestRunner();\n\nif (isCordova) {\n    document.addEventListener('deviceready', function() {\n        setTimeout(function() {\n            runner.runAllTests();\n        }, 1000);\n    });\n} else if (!isNativeScript && !isNodejs && !isReactNative) {\n    window.addEventListener('load', function() {\n        setTimeout(function() {\n            runner.runAllTests();\n        }, 1000);\n    });\n}\n\nmodule.exports = runner;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./injectables/test-runner/testRunner.js\n// module id = 2\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0","if(typeof __WEBPACK_EXTERNAL_MODULE_4__ === 'undefined') {var e = new Error(\"Cannot find module \\\"react-native\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-native\"\n// module id = 4\n// module chunks = 0","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-options.js\n// module id = 5\n// module chunks = 0","const {\n    isReactNative,\n    isNodejs,\n    isNativeScript,\n    isCordova,\n    isDesktop\n} = require('../platform');\n\nconst MobileTapReporter = function(logServerPort) {\n    //the built in TAP reporter of mocha uses placeholders which do not render in logcat\n    //console.log('ok %d %s # SKIP -', n, title(test));\n\n    //Generates reports in the following format:\n    //https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin\n    return function MobileTapReporter(runner) {\n        var passes = 0;\n        var failures = 0;\n        var n = 0;\n\n        function handleSendLogError(err) {\n            if (err) {\n                console.error(`Failed sending log to server: ${err.message}`);\n            }\n        }\n\n        const logServer = 'http://localhost:' + logServerPort;\n        function mochaLog(message) {\n            console.log('Mocha: ' + message);\n\n            let platform = '';\n            if (isNativeScript) {\n                platform = 'nativescript';\n            } else if (isNodejs) {\n                platform = 'node';\n            } else if (isDesktop) {\n                platform = 'web';\n            } else if (isCordova) {\n                platform = 'cordova';\n            } else if (isReactNative) {\n                platform = 'reactnative';\n            }\n\n            if (isReactNative || isDesktop || isCordova || isNativeScript) {\n                fetch(logServer, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        platform: platform,\n                        logs: [message]\n                    })\n                }).catch(handleSendLogError);\n            } else if (isNodejs) {\n                const requestModule = 'request';\n                const request = require(requestModule);\n                request(\n                    {\n                        method: 'POST',\n                        url: logServer,\n                        json: true,\n                        body: {\n                            platform,\n                            logs: [message]\n                        }\n                    },\n                    handleSendLogError\n                );\n            }\n        }\n\n        /**\n     * Return a TAP-safe title of `test`\n     *\n     * @param {Object} test\n     * @return {String}\n     * @api private\n     */\n\n        function title(test) {\n            return test.fullTitle().replace(/#/g, '');\n        }\n\n        runner.on('start', function() {\n            var total = runner.grepTotal(runner.suite);\n            mochaLog(1 + '..' + total);\n        });\n\n        runner.on('test end', function() {\n            ++n;\n        });\n\n        runner.on('pending', function(test) {\n            mochaLog('ok ' + n + ' ' + title(test) + ' # SKIP-');\n        });\n\n        runner.on('pass', function(test) {\n            passes++;\n            mochaLog('ok ' + n + ' ' + title(test));\n        });\n\n        runner.on('fail', function(test, err) {\n            failures++;\n            var failMessage = 'not ok ' + n + ' ' + title(test);\n            if (err.stack) {\n                failMessage += ' - ' + err.stack.replace(/^/gm, '  ');\n            }\n\n            mochaLog(failMessage);\n        });\n\n        runner.on('end', function() {\n            mochaLog('# tests ' + (passes + failures));\n            mochaLog('# pass ' + passes);\n            mochaLog('# fail ' + failures);\n        });\n    };\n};\n\nmodule.exports = MobileTapReporter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./injectables/test-runner/mobileTapReporter.js\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"./libs/chai\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"./libs/mocha\"\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}